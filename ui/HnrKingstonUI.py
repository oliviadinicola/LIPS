# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HnrKingstonUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import shutil
import datetime

from PyQt5 import QtWidgets, uic
import os

from PyQt5.QtCore import QRegExp
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QDoubleValidator, QRegExpValidator
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QProgressDialog
import parselmouth


class Ui_HnrKingstonPage(QtWidgets.QMainWindow):
    #sets up ui for Hnr/Kingston Page
    def setupUi(self):
        uic.loadUi('HnrKingstonUI.ui', self)
        self.show()
        self.lexicalTierComboBox.addItems(["1", "2"])
        self.labeledTierComboBox.addItems(["1", "2"])
        self.uploadSegmentFileButton.clicked.connect(self.openSegmentDialog)
        self.runAlgoButton.clicked.connect(self.runScript)
        self.cancelButton.clicked.connect(self.handleCancel)
        self.saveParametersButton.clicked.connect(self.saveParams)
        self.loadParametersButton.clicked.connect(self.loadParams)
        self.select_option_labeled("2")

    #saves user parameters entered
    def saveParams(self):
        #getting values from input widgets
        f0min = self.f0MinimumInput.text()
        timeOffset = self.timeOffsetInput.text()
        smoothProp = self.smoothProportionInput.text()
        outputFileName = self.outputFileNameInput.text()
        segmentFileName = self.segmentFileLabel.text()
        leftRange = self.leftRangeInput.text()
        rightRange = self.rightRangeInput.text()
        lowPassFilter = self.lowPassFilterInput.text()
        lexicalTier = self.lexicalTierComboBox.currentText()
        labeledTier = self.labeledTierComboBox.currentText()

        #appends date and time to file name
        current_time = datetime.datetime.now().strftime("%m_%d_%Y_%H_%M_%S")
        file_path = "saved_parameters_hnr/parameters_" + current_time + ".txt"

        #writes parameters to txt file, separated by new lines
        with open(file_path, 'w') as file:
            file.write(f0min + "\n")
            file.write(timeOffset + "\n")
            file.write(smoothProp + "\n")
            file.write(outputFileName + "\n")
            file.write(segmentFileName + "\n")
            file.write(leftRange + "\n")
            file.write(rightRange + "\n")
            file.write(lowPassFilter+ "\n")
            file.write(lexicalTier + "\n")
            file.write(labeledTier + "\n")
        self.saveParamsLabel.setText(f"Parameters saved to {file_path}")

    #load parameter txt file
    def loadParams(self):
        #file dialog to select desired parameter file
        fname, _ = QFileDialog.getOpenFileName(self, "Open File", "saved_parameters_hnr/", "Text File (*.txt)")
        #reads values from file and fills in input widgets
        with open(fname, 'r') as file:
            lines = file.readlines()
            if lines:
                self.f0MinimumInput.setText(lines[0].strip())
                self.timeOffsetInput.setText(lines[1].strip())
                self.smoothProportionInput.setText(lines[2].strip())
                self.outputFileNameInput.setText(lines[3].strip())
                self.segmentFileLabel.setText(lines[4].strip())
                self.leftRangeInput.setText(lines[5].strip())
                self.rightRangeInput.setText(lines[6].strip())
                self.lowPassFilterInput.setText(lines[7].strip())
                self.select_option_lexical(lines[8].strip())
                self.select_option_labeled(lines[9].strip())

    #validates input types and ranges
    def validateInputs(self):
        invalid_inputs = []

        #defining the type of value and range for each variable
        validators = {
            self.f0MinimumInput: (QDoubleValidator(0, 500, 1000), "Integer/Decimal between 0 and 500"),
            self.timeOffsetInput: (QDoubleValidator(0, 1000, 1000), "Integer/Decimal between 0 and 1000"),
            self.smoothProportionInput: (QDoubleValidator(0, 1, 1000), "Integer/Decimal between 0 and 1"),
            self.outputFileNameInput: (QRegExpValidator(QRegExp("[^./\\:*?\"<>|]+")), "Valid file name"),
            self.leftRangeInput: (QDoubleValidator(0, 8000, 1000),"Integer/Decimal between 0 and 8000"),
            self.rightRangeInput: (QDoubleValidator(0, 8000, 1000),"Integer/Decimal between 0 and 8000"),
            self.lowPassFilterInput: (QDoubleValidator(0, 8000, 1000),"Integer/Decimal between 0 and 8000")
        }
        # Store references to input widgets in a list
        input_widgets = [self.f0MinimumInput, self.timeOffsetInput, self.smoothProportionInput, self.outputFileNameInput, self.leftRangeInput, self.rightRangeInput, self.lowPassFilterInput]

        #iterates through validators
        for input_widget, (validator, valid_range) in validators.items():
            state, _, _ = validator.validate(input_widget.text(), 0)

            #adds incorrect inputs to a list
            if state != validator.Acceptable:
                invalid_inputs.append(f"{input_widget.objectName()} ({valid_range})")

        #ensures segment file is uploaded
        if self.segmentFileLabel.text() == '':
            QMessageBox.warning(self, "Validation Result",
                                f"Please upload a segment file")
            return False

        lexicalTierValue = self.lexicalTierComboBox.currentText()
        labeledTierValue = self.labeledTierComboBox.currentText()

        #making sure comboboxes are two different values
        if lexicalTierValue == labeledTierValue:
            QMessageBox.warning(self, "Validation Result", "Lexical and Labeled Tiers cannot have the same value")
            return False

        #pop up shows user which inputs are incorrect
        if invalid_inputs:
            QMessageBox.warning(self, "Validation Result",
                                f"Please enter valid inputs for: {', '.join(invalid_inputs)}.")
            return False
        else:
            return True

    #function to select labeled tier combobox value
    def select_option_labeled(self, option_text):
        index = self.labeledTierComboBox.findText(option_text)
        if index != -1:
            self.labeledTierComboBox.setCurrentIndex(index)

    #function to select lexical tier combobox value
    def select_option_lexical(self, option_text):
        index = self.lexicalTierComboBox.findText(option_text)
        if index != -1:
            self.lexicalTierComboBox.setCurrentIndex(index)

    #opens file dialog to select segment file
    def openSegmentDialog(self):
        fname = QFileDialog.getOpenFileName(self, "Open File", "", "Text Files (*.txt)")
        self.segmentFileLabel.setText(fname[0])

    #cancel button close window
    def handleCancel(self):
        self.close()

    #function to run algorithm, called from "Run Algorithm" button
    def runScript(self):
        #validating input before algorithm is run
        if self.validateInputs() == True:
            # Get input values
            f0 = float(self.f0MinimumInput.text())
            time_offset = float(self.timeOffsetInput.text())
            smooth_proportion = float(self.smoothProportionInput.text())
            output_file_name = str(self.outputFileNameInput.text())
            freq_left_range = float(self.leftRangeInput.text())
            freq_right_range = float(self.rightRangeInput.text())
            freq_low_pass_filter = float(self.lowPassFilterInput.text())
            lexical_tier = self.lexicalTierComboBox.currentText()
            labeled_tier = self.labeledTierComboBox.currentText()
            directory = 'uploaded_files/'
            segment_file_name = self.segmentFileLabel.text()

            # Create the output directory if it doesn't exist
            os.makedirs(directory, exist_ok=True)

            # Define the output file path in the output directory
            output_file_path = os.path.join(directory, os.path.basename(segment_file_name))

            # Copy the uploaded file to the output directory
            try:
                shutil.copy(segment_file_name, output_file_path)
            except Exception as e:
                print(f"Error saving file: {e}")

            # Generate a unique filename based on the current date and time
            current_time = datetime.datetime.now().strftime("%m_%d_%Y_%H_%M_%S")
            output_file_name = f"output/{output_file_name}_{current_time}.txt"

            # Show progress dialog indicating the algorithm is running
            progress_dialog = QProgressDialog("Running Algorithm...", None, 0, 0, self)
            progress_dialog.setWindowModality(Qt.WindowModal)
            progress_dialog.setCancelButton(None)
            progress_dialog.setWindowTitle("Algorithm is running. This may take a few minutes.")
            progress_dialog.setWindowFlags(Qt.Window | Qt.CustomizeWindowHint | Qt.WindowTitleHint)
            progress_dialog.setMinimumDuration(0)
            progress_dialog.setValue(0)
            progress_dialog.resize(400, 50)

            progress_dialog.show()

            # Run Praat script with parameters
            parselmouth.praat.run_file("lenition_2nd_1_KTOneBand.praat", directory, output_file_name,
                                       os.path.basename(segment_file_name),
                                       labeled_tier, lexical_tier,
                                       freq_left_range, freq_right_range, freq_low_pass_filter,
                                       smooth_proportion, f0, time_offset)

            # Close the progress dialog after completion
            progress_dialog.close()

            # Show dialog box indicating completion
            QMessageBox.information(self, "Algorithm Completed",
                                    "The algorithm is done. Output is saved to the output/ folder.")

            #close window when algorithm finishes running
            self.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    loadFilesPage = QtWidgets.QMainWindow()
    ui = Ui_HnrKingstonPage()
    ui.setupUi()
    sys.exit(app.exec_())
