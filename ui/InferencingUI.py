# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'InferencingUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import os
import re
import shutil
import subprocess

from PyQt5 import QtWidgets, uic, QtCore
from PyQt5.QtWidgets import QFileDialog


class Ui_InferencingPage(QtWidgets.QMainWindow):
    def setupUi(self):
        uic.loadUi('InferencingUI.ui', self)
        self.uploadPhonetFilesButton.clicked.connect(self.openFolderDialog)
        self.uploadFeatureChartButton.clicked.connect(self.openPhonological)
        self.runAlgoButton.clicked.connect(self.runAlgo)
        self.cancelButton.clicked.connect(self.handleCancel)
        self.show()

    def openFolderDialog(self):
        folderpath = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select Folder')
        self.phonetFilePathLabel.setText(folderpath)

    def openPhonological(self):
        fname = QFileDialog.getOpenFileName(self, "Open File", "", "*.py")
        self.phonologicalChartLabel.setText(fname[0])
        _, dict_keys = self.extract_dictionary_keys(fname[0])
        for key in dict_keys:
            self.listOfPhonologicalFeatures.addItem(key)
        self.listOfPhonologicalFeatures.show()


    def extract_dictionary_keys(self, file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            code = file.read()

        # Use regex to find the dictionary definition
        pattern = r"\{([^}]*)\}"
        match = re.search(pattern, code)
        if match:
            dictionary_str = match.group(0)
            # Extract keys from the dictionary string
            keys = re.findall(r'\'([^\']*)\'', dictionary_str)
            return dictionary_str, keys
        else:
            return []

    def runAlgo(self):
        directory = 'posterior_probs/'
        os.makedirs(directory, exist_ok=True)
        all_phonological_feat = [self.listOfPhonologicalFeatures.item(i).text() for i in range(self.listOfPhonologicalFeatures.count())]
        all_phonological_feat_str = json.dumps(all_phonological_feat)
        selected_phon_feat = [self.listOfPhonologicalFeatures.item(i).text()
                              for i in range(self.listOfPhonologicalFeatures.count())
                              if self.listOfPhonologicalFeatures.item(i).isSelected()]
        selected_phonological_feat_str = json.dumps(selected_phon_feat)

        # Get entire phonological.py file to pass as dict
        phonological_file_name = self.phonologicalChartLabel.text()
        directory = 'uploaded_files/'
        os.makedirs(directory, exist_ok=True)

        # Define the output file path in the output directory
        output_file_path = os.path.join(directory, os.path.basename(phonological_file_name))

        # Copy the uploaded file to the output directory
        try:
            shutil.copy(phonological_file_name, output_file_path)
        except Exception as e:
            print(f"Error saving file: {e}")

        # Rename the phonological file
        new_path = directory + "Phonological.py"
        shutil.move(output_file_path, new_path)

        phonological = self.phonologicalChartLabel.text()
        dict, _ = self.extract_dictionary_keys(phonological)

        # Define the command to run the other Python script
        command = ["python", "inferencing.py", self.phonetFilePathLabel.text(), self.phonologicalChartLabel.text(),
                   selected_phonological_feat_str, dict, 'uploaded_files/']

        # Run the command
        subprocess.run(command)
        self.close()

    def handleCancel(self):
        self.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    loadFilesPage = QtWidgets.QMainWindow()
    ui = Ui_InferencingPage()
    ui.setupUi()
    sys.exit(app.exec_())