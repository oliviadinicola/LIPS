# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'loadFilesUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtWidgets, uic, QtCore
from PyQt5.QtWidgets import QFileDialog

class Ui_loadFilesPage(QtWidgets.QMainWindow):

    filesSelected = QtCore.pyqtSignal(list)  # Define a signal

    #sets up UI for Load Files Page
    def setupUi(self):
        uic.loadUi('loadFilesUI.ui', self)
        self.show()
        self.cancelButton.clicked.connect(self.closeWindow)
        self.UploadAudioFilesButton.clicked.connect(self.openAudioDialog)
        self.uploadTextGridFilesButton.clicked.connect(self.openTextGridDialog)
        self.removeAudioFilesButton.clicked.connect(self.removeSelectedAudioFiles)
        self.removeTextGridFilesButton.clicked.connect(self.removeSelectedTextGridFiles)
        self.OKButton.clicked.connect(self.handleOK)
        self.errorMessageLabel.setStyleSheet("color: red; font-size: 16px;")

    #closes window
    def closeWindow(self):
        self.errorMessageLabel.setText("")
        self.close()

    #opens File Explorer to upload audio files
    def openAudioDialog(self):
        fnames = QFileDialog.getOpenFileNames(self, "Open File", "", "WAV File (*.wav)")
        for fname in fnames[0]:
            self.audioFileListWidget.addItem(fname)
        self.audioFileListWidget.show()

    #opens File Explorer to upload TextGrid files
    def openTextGridDialog(self):
        fnames = QFileDialog.getOpenFileNames(self, "Open File", "", "TextGrid File (*.TextGrid)")
        for fname in fnames[0]:
            self.textGridFileListWidget.addItem(fname)

        self.textGridFileListWidget.show()

    #removes selected audio files
    def removeSelectedAudioFiles(self):
        #gets selected items
        listitems = self.audioFileListWidget.selectedItems()
        if not listitems:
            return
        #removes items from list
        for item in listitems:
            row = self.audioFileListWidget.row(item)
            self.audioFileListWidget.takeItem(row)

    #removes selected TextGrid files
    def removeSelectedTextGridFiles(self):
        #gets selected items
        listitems = self.textGridFileListWidget.selectedItems()
        if not listitems:
            return
        #removes items from list
        for item in listitems:
            row = self.textGridFileListWidget.row(item)
            self.textGridFileListWidget.takeItem(row)

    #OK button
    def handleOK(self):
        #gets list of uploaded audio files
        selected_audio_files = [self.audioFileListWidget.item(i).text() for i in
                                range(self.audioFileListWidget.count())]
        #gets list of uploaded TextGrid files
        selected_textgrid_files = [self.textGridFileListWidget.item(i).text() for i in
                                   range(self.textGridFileListWidget.count())]
        #sorts lists in alphabetical order by name
        selected_audio_files.sort()
        selected_textgrid_files.sort()
        all_files = []

        #adds audio files and corresponding TextGrid files, one pair at a time
        for audio_file in selected_audio_files:
            all_files.append(audio_file)
            # Find corresponding textgrid file
            corresponding_textgrid = audio_file[:-4] + '.TextGrid'
            #adds corresponding textgrid if it exists
            if corresponding_textgrid in selected_textgrid_files:
                all_files.append(corresponding_textgrid)
                self.errorMessageLabel.setText("")
            #throws an error since audio file has no corresponding TextGrid file
            else:
                self.errorMessageLabel.setText("Audio file " + audio_file + " does not have corresponding TextGrid file!")
                return

        #checks that TextGrid files have a corresponding audio file, one pair at a time
        for textgrid_file in selected_textgrid_files:
            corresponding_audio = textgrid_file[:-9] + '.wav'
            #checking to see if corresponding audio file exists
            if corresponding_audio in selected_audio_files:
                self.errorMessageLabel.setText("")
            #throws an error since TextGrid file has no corresponding audio file
            else:
                self.errorMessageLabel.setText("TextGrid file " + textgrid_file + " does not have corresponding Audio file!")
                return

        #transmits list of all files to Home Page
        self.filesSelected.emit(all_files)

        #closes window
        self.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    loadFilesPage = QtWidgets.QMainWindow()
    ui = Ui_loadFilesPage()
    ui.setupUi()
    sys.exit(app.exec_())
