# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'loadFilesUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtWidgets, uic, QtCore
from PyQt5.QtWidgets import QFileDialog


class Ui_loadFilesPage(QtWidgets.QMainWindow):
    filesSelected = QtCore.pyqtSignal(list)  # Define a signal
    def setupUi(self):
        uic.loadUi('loadFilesUI.ui', self)
        self.show()
        self.cancelButton.clicked.connect(self.closeWindow)
        self.UploadAudioFilesButton.clicked.connect(self.openAudioDialog)
        self.uploadTextGridFilesButton.clicked.connect(self.openTextGridDialog)
        self.removeAudioFilesButton.clicked.connect(self.removeSelectedAudioFiles)
        self.removeTextGridFilesButton.clicked.connect(self.removeSelectedTextGridFiles)
        self.OKButton.clicked.connect(self.handleOK)

    def closeWindow(self):
        self.close()

    def openAudioDialog(self):
        fname = QFileDialog.getOpenFileName(self, "Open File", "", "WAV File (*.wav)")
        self.audioFileListWidget.addItem(fname[0])
        self.audioFileListWidget.show()

    def openTextGridDialog(self):
        fname = QFileDialog.getOpenFileName(self, "Open File", "", "TextGrid File (*.TextGrid)")
        self.textGridFileListWidget.addItem(fname[0])
        self.textGridFileListWidget.show()

    def removeSelectedAudioFiles(self):
        listitems = self.audioFileListWidget.selectedItems()
        if not listitems:
            return
        for item in listitems:
            row = self.audioFileListWidget.row(item)
            self.audioFileListWidget.takeItem(row)

    def removeSelectedTextGridFiles(self):
        listitems = self.textGridFileListWidget.selectedItems()
        if not listitems:
            return
        for item in listitems:
            row = self.textGridFileListWidget.row(item)
            self.textGridFileListWidget.takeItem(row)

    def handleOK(self):
        selected_audio_files = [self.audioFileListWidget.item(i).text() for i in
                                range(self.audioFileListWidget.count())]
        selected_textgrid_files = [self.textGridFileListWidget.item(i).text() for i in
                                   range(self.textGridFileListWidget.count())]
        selected_audio_files.sort()
        selected_textgrid_files.sort()
        all_files = []

        for audio_file in selected_audio_files:
            all_files.append(audio_file)
            # Find corresponding textgrid file
            corresponding_textgrid = audio_file[:-4] + '.TextGrid'
            if corresponding_textgrid in selected_textgrid_files:
                all_files.append(corresponding_textgrid)



        self.filesSelected.emit(all_files)
        self.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    loadFilesPage = QtWidgets.QMainWindow()
    ui = Ui_loadFilesPage()
    ui.setupUi()
    sys.exit(app.exec_())
